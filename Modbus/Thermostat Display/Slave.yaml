esphome:
  name: mirror-thermostat-test
  friendly_name: Mirror Thermostat Test



http_request:
  verify_ssl: false

esp32:
  board: esp32-poe
  framework:
    type: arduino

external_components:
  - source: github://epiclabs-io/esphome-modbus-server@master
    refresh: 60s
    components:
      - modbus_server

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "TBhOPb3cdw/qYvtPNMyKSEbCzTndys50sCuzWvcJtvY="

ota:
  - platform: esphome
    password: "fb39b717418246ea162532314bca89cf"

wifi:
  ssid: Bozhe Ime
  password: "0897923140"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Poe-Prototype"
    password: "QujZYANull7b"

captive_portal:

web_server:
  port: 80

i2c:
  sda: 13
  scl: 16
  scan: True
  id: bus_a


sensor:
  - platform: sht3xd
    temperature:
      name: "Temp"
      id: temp
    address: 0x44
    update_interval: 60s




uart:
  id: intmodbus
  tx_pin: 4
  rx_pin: 36
  baud_rate: 9600
  stop_bits: 1
  data_bits: 8
  parity: NONE
  debug:
    direction: BOTH

modbus_server:
  id: modbuserver
  uart_id: intmodbus
  address: 1 # slave address
  holding_registers:
    - start_address: 0x9001 # register to match master number address
      number: 1
      on_write: |-
        ESP_LOGI("ON_WRITE", "Write to address 0x9001, value=%d", value);
        auto call = id(number_value).make_call();
        call.set_value(value);
        call.perform();
        return value;
      on_read: |-
        int current_value = id(number_value).state;
        ESP_LOGI("ON_READ", "Read from address 0x9001, value=%d", current_value);
        return current_value;

    - start_address: 0x9002 # register to expose temperature
      number: 1
      on_read: |-
        int temp_value = id(temp).state;
        ESP_LOGI("ON_READ", "Read from address 0x9002, temp_value=%d", temp_value);
        return temp_value;

number:
  - platform: template
    id: number_value
    name: "Number Value"
    optimistic: true
    min_value: 15
    max_value: 30
    step: 1
    restore_value: true
    on_value:
      then:
        - component.update: tm1637_display


display:
  - platform: tm1637
    id: tm1637_display
    clk_pin: 33
    dio_pin: 32
    inverted: true
    length: 4
    lambda: |-
      // Display the number value on the TM1637 display
      it.printf(0, "%.0f", id(number_value).state);



binary_sensor:
  - platform: gpio
    pin:
      number: 34
      # mode: INPUT_PULLUP
      inverted: true
    name: "Increase Number"
    on_press:
      then:
        - lambda: |-
            int current_value = id(number_value).state;
            if (current_value < 30) {
              current_value += 1;
              id(number_value).publish_state(current_value);
            }

  - platform: gpio
    pin:
      number: 39
      # mode: INPUT_PULLUP
      inverted: true
    name: "Decrease Number"
    on_press:
      then:
        - lambda: |-
            int current_value = id(number_value).state;
            if (current_value > 15) {
              current_value -= 1;
              id(number_value).publish_state(current_value);
            }