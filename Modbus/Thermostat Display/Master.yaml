esphome:
  name: esp-poe-prototype-2
  friendly_name: ESP POE Prototype 2

esp32:
  board: esp32-poe
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "TBhOPb3cdw/qYvtPNMyKSEbCzTndys50sCuzWvcJtvY="

ota:
  - platform: esphome
    password: "fb39b717418246ea162532314bca89cf"

wifi:
  ssid: Bozhe Ime
  password: "0897923140"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Poe-Prototype"
    password: "QujZYANull7b"

captive_portal:


# Configure the UART for Modbus
uart:
  id: uart_modbus_client
  tx_pin: 4
  rx_pin: 36
  baud_rate: 9600

# Configure the Modbus component as a server
modbus:
  uart_id: uart_modbus_client
  id: modbus_client



modbus_controller:
  - id: modbus_slave_1
    modbus_id: modbus_client
    address: 0x1
    update_interval: 5s


number:
  - platform: modbus_controller
    modbus_controller_id: modbus_slave_1
    id: num1
    name: "num1"
    address: 0x9001
    value_type: U_WORD
    multiply: 1.0
    min_value: 15
    max_value: 30
    step: 1


sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_slave_1
    address: 0x9002
    name: "Temp"
    id: temp
    accuracy_decimals: 2
    register_type: holding
    value_type: U_WORD
    filters:
      - timeout: 10s  # sent value will be NaN




switch:
  - platform: gpio
    pin: 1
    id: heater
    name: "Heater"

  - platform: gpio
    pin: 2
    id: air_cond
    name: "Heater"




climate:
  - platform: thermostat
    name: "Thermostat Climate Controller"
    id: therm
    sensor: temp
    min_cooling_off_time: 0s
    min_cooling_run_time: 0s
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    cool_action:
      - switch.turn_on: air_cond
    heat_action:
      - switch.turn_on: heater
    idle_action:
      - switch.turn_off: air_cond
      - switch.turn_off: heater
    visual:
      min_temperature: 15
      max_temperature: 30
      temperature_step: 1
    on_control:
      then:
        - delay: 200ms 
        - lambda: |-
            auto call = id(num1).make_call();
            if (id(therm).mode == CLIMATE_MODE_COOL) {
              call.set_value(id(therm).target_temperature_high);
            } else if (id(therm).mode == CLIMATE_MODE_HEAT) {
              call.set_value(id(therm).target_temperature_low);
            }
            call.perform();



interval:
  - interval: 10s
    then:
      - script.execute: update_thermostat_temp

script:
  - id: update_thermostat_temp
    mode: queued
    then:
      - lambda: |-
          auto call = id(therm).make_call();
          if (id(therm).mode == CLIMATE_MODE_COOL) {
            call.set_target_temperature_high(id(num1).state);
          } else if (id(therm).mode == CLIMATE_MODE_HEAT) {
            call.set_target_temperature_low(id(num1).state);
          }
          call.perform();